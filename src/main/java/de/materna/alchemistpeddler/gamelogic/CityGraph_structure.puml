@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 1,
    "backwardDepth": 1,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "de.materna.alchemistpeddler.gamelogic.CityGraph",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_840931456 { 
   	label=materna
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1737524960 { 
   	label=alchemistpeddler
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   CityGraph171409429[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CityGraph</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   routes: EnumMap&lt;CITY_NAME, EnumMap&lt;CITY_NAME, Route&gt;&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ buildGraph(minPrice: int, maxPrice: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPrice(from: CITY_NAME, dest: CITY_NAME): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game171409429[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cityGraph: CityGraph [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameDay: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameStateListener: GameStateListener [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- checkWinCondition()</TD></TR>
<TR><TD ALIGN="LEFT" >- fireEvent()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUpdate(event: PlayerEvent)</TD></TR>
<TR><TD ALIGN="LEFT" ># nextDay()</TD></TR>
<TR><TD ALIGN="LEFT" >- updateGameState()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameState171409429[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameState</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cityGraph: CityGraph [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cityRecords: List&lt;CityRecord&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameDay: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lastDay: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerRecord: PlayerRecord [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ cityGraph(): CityGraph</TD></TR>
<TR><TD ALIGN="LEFT" >+ cityRecords(): List&lt;CityRecord&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ gameDay(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ lastDay(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ playerRecord(): PlayerRecord</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player171409429[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cityGraph: CityGraph [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currency: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   debt: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   inventory: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   location: City [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lost: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   potionCapacity: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   won: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># buy(potion: Potion, amount: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkInventoryCapacity(amount: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" ># payLoan(amount: int)</TD></TR>
<TR><TD ALIGN="LEFT" ># sell(potion: Potion, amount: int)</TD></TR>
<TR><TD ALIGN="LEFT" ># takeLoan(amount: int)</TD></TR>
<TR><TD ALIGN="LEFT" ># travel(dest: City)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Route1798247951[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Route</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cost: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dest: CITY_NAME [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   from: CITY_NAME [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ cost(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ dest(): CITY_NAME</TD></TR>
<TR><TD ALIGN="LEFT" >+ from(): CITY_NAME</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
CityGraph171409429 -> Route1798247951[label="routes
[0..*]"];
Game171409429 -> CityGraph171409429[label="cityGraph
[0..1]"];
GameState171409429 -> CityGraph171409429[label="cityGraph
[0..1]"];
Player171409429 -> CityGraph171409429[label="cityGraph
[0..1]"];
    
}
@enduml